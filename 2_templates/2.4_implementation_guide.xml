<?xml version="1.0" encoding="UTF-8"?>
<ImplementationGuide>
    <Metadata>
        <GuideID>[Unique_ID_Following_Project_Convention]</GuideID>
        <Title>[Descriptive Title of What This Guide Implements]</Title>
        <Version>1.0</Version>
        <Category>[Foundation|Core|Feature|Integration|Testing|Deployment]</Category>
        <Priority>[High|Medium|Low]</Priority>
        <EstimatedTime>[Time estimate, e.g., "2 hours", "1 day"]</EstimatedTime>
        <Description>[Comprehensive description of what this implementation guide covers]</Description>
        <Tags>[Comma-separated tags: backend, frontend, database, api, security, etc.]</Tags>
    </Metadata>

    <DocumentationReferences>
        <!-- Reference the design documentation that this implementation is based on -->
        <Reference type="[Requirements|Architecture|Design|API|DataModel|UI|Security|External]" href="[path/URL]">[Reference Description]</Reference>
        <Reference type="External" href="[URL]">[External Documentation/Tutorial/Guide]</Reference>
    </DocumentationReferences>

    <TestReferences>
        <!-- Reference unit test XML files that validate this implementation -->
        <UnitTest id="[TEST_ID]" path="tests/unit/[component]/[Component].test.xml">
            <Description>[What this test validates]</Description>
            <Coverage>[What aspects of implementation it covers]</Coverage>
        </UnitTest>
        <UnitTest id="[TEST_ID_2]" path="tests/unit/[component]/[Feature].test.xml">
            <Description>[Additional test coverage]</Description>
            <Coverage>[Specific scenarios tested]</Coverage>
        </UnitTest>
    </TestReferences>

    <Prerequisites>
        <!-- List prerequisites: other guides, tools, environment setup -->
        <Prerequisite type="[Guide|Tool|Environment|Knowledge]" id="[optional_id]">[Description of what must be ready]</Prerequisite>
        <Prerequisite type="Tool">[e.g., Node.js 18+, Python 3.10+, Docker installed]</Prerequisite>
        <Prerequisite type="Environment">[e.g., Database running, API keys configured]</Prerequisite>
    </Prerequisites>

    <Purpose>
        [Clear statement of why this implementation is needed and what problem it solves]
    </Purpose>

    <ScopeAndObjectives>
        <Objective>[Primary objective of this implementation]</Objective>
        <Objective>[Secondary objective]</Objective>
        <OutOfScope>[What this guide does NOT cover]</OutOfScope>
    </ScopeAndObjectives>

    <TechnicalStack>
        <!-- Define the technical stack for this component -->
        <Language>[Primary programming language(s)]</Language>
        <Framework>[Framework(s) being used]</Framework>
        <Database>[Database technology if applicable]</Database>
        <Dependencies>[Key libraries or packages]</Dependencies>
    </TechnicalStack>

    <ImplementationSteps>
        <!-- Organize implementation by logical steps or components -->
        
        <Step number="1" name="Project Structure">
            <Description>[Set up the basic project structure]</Description>
            <Tasks>
                <Task type="directory" path="[src/components]">[Create component directory]</Task>
                <Task type="file" path="[src/index.js]">[Create entry point file]</Task>
                <Task type="file" path="[config/settings.json]">[Create configuration file]</Task>
            </Tasks>
        </Step>

        <Step number="2" name="Core Implementation">
            <Description>[Implement the core functionality]</Description>
            <Tasks>
                <Task type="code" id="core_class">
                    <Description>[Implement the main class/component]</Description>
                    <Code language="[javascript|python|java|etc]" file="[path/to/file]"><![CDATA[
// Example code structure
class ExampleComponent {
    constructor(config) {
        this.config = config;
    }
    
    initialize() {
        // Initialization logic
    }
}
                    ]]></Code>
                    <TestValidation>
                        <TestFile>tests/unit/ExampleComponent.test.xml</TestFile>
                        <TestCases>
                            <TestCase id="test_constructor">Validates constructor initialization</TestCase>
                            <TestCase id="test_initialize">Validates initialize method</TestCase>
                        </TestCases>
                    </TestValidation>
                </Task>
                <Task type="configuration" id="config_setup">
                    <Description>[Set up configuration]</Description>
                    <Code language="json" file="[config/settings.json]"><![CDATA[
{
    "application": {
        "name": "Example App",
        "version": "1.0.0",
        "environment": "development"
    }
}
                    ]]></Code>
                </Task>
            </Tasks>
        </Step>

        <Step number="3" name="Data Layer">
            <Description>[Implement data models and database interactions]</Description>
            <Tasks>
                <Task type="database" id="create_schema">
                    <Description>[Create database schema]</Description>
                    <Code language="sql"><![CDATA[
-- Generic table structure
CREATE TABLE IF NOT EXISTS items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
                    ]]></Code>
                </Task>
                <Task type="code" id="data_model">
                    <Description>[Implement data model]</Description>
                    <Code language="[language]" file="[models/Item.js]"><![CDATA[
// Data model implementation
class Item {
    constructor(data) {
        this.id = data.id;
        this.name = data.name;
        this.description = data.description;
    }
    
    validate() {
        // Validation logic
    }
}
                    ]]></Code>
                </Task>
            </Tasks>
        </Step>

        <Step number="4" name="Business Logic">
            <Description>[Implement business rules and services]</Description>
            <Tasks>
                <Task type="code" id="service_layer">
                    <Description>[Create service layer]</Description>
                    <Code language="[language]" file="[services/ItemService.js]"><![CDATA[
// Service layer example
class ItemService {
    constructor(repository) {
        this.repository = repository;
    }
    
    async createItem(data) {
        // Business logic for creating item
        const item = new Item(data);
        item.validate();
        return await this.repository.save(item);
    }
}
                    ]]></Code>
                    <TestValidation>
                        <TestFile>tests/unit/services/ItemService.test.xml</TestFile>
                        <TestCases>
                            <TestCase id="test_create_valid_item">Valid item creation</TestCase>
                            <TestCase id="test_create_invalid_item">Invalid item rejection</TestCase>
                            <TestCase id="test_repository_error">Repository error handling</TestCase>
                        </TestCases>
                    </TestValidation>
                </Task>
            </Tasks>
        </Step>

        <Step number="5" name="API/Interface Layer">
            <Description>[Implement API endpoints or user interface]</Description>
            <Tasks>
                <Task type="api" id="rest_endpoints">
                    <Description>[Define REST API endpoints]</Description>
                    <Code language="[language]" file="[routes/items.js]"><![CDATA[
// API endpoint example
router.post('/items', async (req, res) => {
    try {
        const item = await itemService.createItem(req.body);
        res.status(201).json(item);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});
                    ]]></Code>
                </Task>
            </Tasks>
        </Step>

        <Step number="6" name="Configuration and Deployment">
            <Description>[Set up configuration and deployment files]</Description>
            <Tasks>
                <Task type="deployment" id="docker_setup">
                    <Description>[Create Docker configuration]</Description>
                    <Code language="dockerfile" file="Dockerfile"><![CDATA[
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
                    ]]></Code>
                </Task>
                <Task type="configuration" id="env_setup">
                    <Description>[Environment configuration]</Description>
                    <Code language="env" file=".env.example"><![CDATA[
# Application settings
APP_NAME=ExampleApp
APP_PORT=3000
APP_ENV=development

# Database settings
DB_HOST=localhost
DB_PORT=5432
DB_NAME=exampledb
DB_USER=appuser
DB_PASSWORD=changeme
                    ]]></Code>
                </Task>
            </Tasks>
        </Step>
    </ImplementationSteps>

    <QualityAssurance>
        <CodeStandards>
            <Standard>[Code formatting standard, e.g., ESLint, Black, etc.]</Standard>
            <Standard>[Naming conventions to follow]</Standard>
            <Standard>[Documentation requirements]</Standard>
        </CodeStandards>
        
        <Testing>
            <!-- Reference to unit test XML files for this implementation -->
            <RequiredTests>
                <TestReference id="[TEST_ID]" path="tests/unit/[component]/[Component].test.xml">
                    <TestCases>
                        <TestCase>[test_case_id_1]</TestCase>
                        <TestCase>[test_case_id_2]</TestCase>
                    </TestCases>
                    <MinimumCoverage>80</MinimumCoverage>
                </TestReference>
            </RequiredTests>
            
            <TestType type="unit">
                <Description>[Unit test requirements]</Description>
                <Coverage>[Minimum coverage percentage]</Coverage>
                <TestFiles>
                    <TestFile path="tests/unit/services/ItemService.test.xml"/>
                    <TestFile path="tests/unit/models/Item.test.xml"/>
                </TestFiles>
            </TestType>
            
            <TestType type="integration">
                <Description>[Integration test requirements]</Description>
                <TestFiles>
                    <TestFile path="tests/integration/api/items.test.xml"/>
                </TestFiles>
            </TestType>
            
            <TestType type="performance">
                <Description>[Performance test requirements]</Description>
                <TestFiles>
                    <TestFile path="tests/performance/ItemService.test.xml"/>
                </TestFiles>
                <PerformanceTargets>
                    <Target metric="response_time" value="200ms"/>
                    <Target metric="throughput" value="1000 req/s"/>
                </PerformanceTargets>
            </TestType>
        </Testing>

        <SecurityConsiderations>
            <Consideration type="[Authentication|Authorization|DataProtection|InputValidation]">
                [Security requirement description]
            </Consideration>
        </SecurityConsiderations>
    </QualityAssurance>

    <IntegrationPoints>
        <!-- Define how this component integrates with others -->
        <Integration>
            <Component>[Component/Service name]</Component>
            <Method>[REST API|Message Queue|Database|File System|WebSocket]</Method>
            <DataFlow>[Description of data flow between components]</DataFlow>
        </Integration>
    </IntegrationPoints>

    <ValidationAndVerification>
        <Checklist>
            <Item>[All files created as specified]</Item>
            <Item>[Code compiles/runs without errors]</Item>
            <Item>[All referenced unit tests pass]</Item>
            <Item>[Test coverage meets minimum requirements]</Item>
            <Item>[Documentation is complete]</Item>
            <Item>[Security requirements met]</Item>
            <Item>[Performance targets achieved]</Item>
        </Checklist>
        
        <TestValidation>
            <!-- Specify which test suites must pass for this implementation -->
            <RequiredTestSuites>
                <TestSuite path="tests/unit/[component]/">All unit tests for component</TestSuite>
                <TestSuite path="tests/integration/[feature]/">Integration tests</TestSuite>
            </RequiredTestSuites>
            <CoverageRequirements>
                <LineCoverage minimum="80">Minimum line coverage</LineCoverage>
                <BranchCoverage minimum="75">Minimum branch coverage</BranchCoverage>
            </CoverageRequirements>
        </TestValidation>
        
        <AcceptanceCriteria>
            <Criterion testRef="[TEST_ID]">[Specific measurable criterion validated by test]</Criterion>
            <Criterion testRef="[TEST_ID_2]">[Another criterion with test reference]</Criterion>
        </AcceptanceCriteria>
    </ValidationAndVerification>

    <Troubleshooting>
        <CommonIssue>
            <Problem>[Description of common problem]</Problem>
            <Solution>[How to resolve it]</Solution>
        </CommonIssue>
    </Troubleshooting>

    <MaintenanceAndSupport>
        <Logging>[Logging strategy and requirements]</Logging>
        <Monitoring>[What metrics to monitor]</Monitoring>
        <Updates>[How to handle updates and patches]</Updates>
    </MaintenanceAndSupport>

    <Notes>
        <Note type="[Important|Warning|Info|Tip]">[Additional information]</Note>
        <Note type="Dependencies">[Important dependency information]</Note>
        <Note type="Performance">[Performance considerations]</Note>
        <Note type="Scalability">[Scalability considerations]</Note>
    </Notes>
</ImplementationGuide>